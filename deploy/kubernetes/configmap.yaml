apiVersion: v1
kind: ConfigMap
metadata:
  name: bridge-config
  namespace: bridge-platform
data:
  NODE_ENV: "production"
  FRONTEND_URL: "https://bridge-ai.com"
  BACKEND_URL: "https://api.bridge-ai.com"
  AI_SERVICE_URL: "http://bridge-ai-service:8000"
  BCI_SIMULATOR_URL: "http://bridge-bci-simulator:9000"
  
  # Database
  DATABASE_HOST: "bridge-postgres"
  DATABASE_PORT: "5432"
  DATABASE_NAME: "bridge_db"
  DATABASE_USER: "bridge_user"
  DATABASE_SSL: "true"
  
  # Redis
  REDIS_HOST: "bridge-redis"
  REDIS_PORT: "6379"
  REDIS_DB: "0"
  
  # AI Configuration
  OPENAI_MODEL: "gpt-4"
  OPENAI_MAX_TOKENS: "2000"
  OPENAI_TEMPERATURE: "0.7"
  
  # BCI Configuration
  BCI_SAMPLE_RATE: "256"
  BCI_CHANNELS: "32"
  BCI_SIMULATION_MODE: "false"
  
  # Feature Flags
  FEATURE_BCI_HARDWARE: "true"
  FEATURE_REAL_AI: "true"
  FEATURE_ANALYTICS: "true"
  FEATURE_PAYMENTS: "true"
  FEATURE_NOTIFICATIONS: "true"
  
  # Security
  JWT_EXPIRES_IN: "7d"
  JWT_REFRESH_EXPIRES_IN: "30d"
  BCRYPT_ROUNDS: "12"
  
  # Monitoring
  SENTRY_ENVIRONMENT: "production"
  LOG_LEVEL: "INFO"
  
  # Rate Limiting
  RATE_LIMIT_ENABLED: "true"
  RATE_LIMIT_REQUESTS: "100"
  RATE_LIMIT_WINDOW: "60"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: bridge-nginx-config
  namespace: bridge-platform
data:
  nginx.conf: |
    events {
        worker_connections 1024;
    }
    
    http {
        upstream backend {
            server bridge-backend:5000;
        }
        
        upstream ai-service {
            server bridge-ai-service:8000;
        }
        
        upstream bci-simulator {
            server bridge-bci-simulator:9000;
        }
        
        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
        
        server {
            listen 80;
            server_name api.bridge-ai.com;
            
            # Security headers
            add_header X-Frame-Options DENY;
            add_header X-Content-Type-Options nosniff;
            add_header X-XSS-Protection "1; mode=block";
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
            
            # API routes
            location /api/ {
                limit_req zone=api burst=20 nodelay;
                proxy_pass http://backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            # Auth routes (stricter rate limiting)
            location /api/auth/ {
                limit_req zone=auth burst=5 nodelay;
                proxy_pass http://backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            # AI service routes
            location /ai/ {
                proxy_pass http://ai-service/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            # BCI simulator routes
            location /bci/ {
                proxy_pass http://bci-simulator/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            # WebSocket support for BCI
            location /ws/ {
                proxy_pass http://bci-simulator;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            # Health check
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
        }
    }