version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: bridge-database
    environment:
      POSTGRES_USER: bridge_user
      POSTGRES_PASSWORD: bridge_password
      POSTGRES_DB: bridge_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - bridge-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bridge_user -d bridge_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: bridge-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - bridge-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: bridge-backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://bridge_user:bridge_password@database:5432/bridge_db
      REDIS_URL: redis://redis:6379
      JWT_SECRET: dev-secret-key-change-in-production
      JWT_EXPIRES_IN: 7d
      AI_SERVICE_URL: http://ai-service:8000
      BCI_SIMULATOR_URL: http://bci-simulator:9000
      PORT: 5000
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bridge-network
    command: npm run dev

  # AI Service (Python)
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    container_name: bridge-ai-service
    environment:
      PYTHONPATH: /app/src
      OPENAI_API_KEY: ${OPENAI_API_KEY:-demo-key}
      REDIS_URL: redis://redis:6379
      DATABASE_URL: postgresql://bridge_user:bridge_password@database:5432/bridge_db
    ports:
      - "8000:8000"
    volumes:
      - ./ai-service:/app
      - ai_models:/app/models
    depends_on:
      - redis
      - database
    networks:
      - bridge-network
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload

  # BCI Simulator
  bci-simulator:
    build:
      context: ./bci-simulator
      dockerfile: Dockerfile
    container_name: bridge-bci-simulator
    environment:
      NODE_ENV: development
      REDIS_URL: redis://redis:6379
      WEBSOCKET_PORT: 9001
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./bci-simulator:/app
      - /app/node_modules
    depends_on:
      - redis
    networks:
      - bridge-network
    command: npm run dev

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: bridge-frontend
    environment:
      REACT_APP_API_URL: http://localhost:5000
      REACT_APP_BCI_WS_URL: ws://localhost:9001
      REACT_APP_AI_SERVICE_URL: http://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
      - ai-service
      - bci-simulator
    networks:
      - bridge-network
    command: npm start

volumes:
  postgres_data:
  redis_data:
  ai_models:

networks:
  bridge-network:
    driver: bridge